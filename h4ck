#!/usr/bin/env python3

from cmd import Cmd
import readline

from fire import Fire

from lib.colors import *
from lib.files import LOCAL_DIR

BANNER = r"""
%s _     _  _        _
%s| |__ | || |   ___| | __
%s| '_ \| || |_ / __| |/ /
%s| | | |__   _| (__|   <
%s|_| |_|  |_|  \___|_|\_\
%s""" % (CLYELLOW, CLYELLOW, CYELLOW, CYELLOW, CDGREY, CEND)

class CommandLine(Cmd):
    __slots__ = ('_modules', '_module', '_histfile', '_histfile_size')

    def __init__(self):
        super().__init__()
        import pkgutil

        self._module = None
        self._histfile = LOCAL_DIR / 'histfile.txt'
        self._histfile_size = 1000

        prefix_len = len('modules.')
        self._modules = [name[prefix_len:] for _, name, is_p in pkgutil.walk_packages(
            ['modules'], prefix='modules.', onerror=lambda _: None
        ) if not is_p]

        info('Available modules:', ', '.join(self._modules))
        self.do_unload()

    @staticmethod
    def print_exceptions(fn):
        def wr(*args, **kwargs):
            try:
                fn(*args, *kwargs)
            except Exception as e:
                err(repr(e))

        return wr

    @staticmethod
    def methods(module):
        from inspect import getmembers, isfunction
        return getmembers(module, isfunction)

    def get_names(self):
        return dir(self)

    def do_unload(self):
        if self._module:
            for m_name, method in self.methods(self._module):
                if m_name.startswith('_') or not method.__doc__:
                    continue
                delattr(self, 'do_%s' % m_name)
                delattr(self, 'help_%s' % m_name)

        self.prompt = '%sh4ck%s> ' % (CYELLOW, CEND)

    def do_use(self, module):
        from importlib import import_module

        self.do_unload()

        try:
            self._module = import_module('modules.%s' % module)
        except ModuleNotFoundError:
            err('Module', module, 'not found')
        except Exception as e:
            err(repr(e))
        else:
            methods = []

            for m_name, method in self.methods(self._module):
                if m_name.startswith('_') or not method.__doc__:
                    continue

                methods.append(m_name)
                setattr(self, 'do_%s' % m_name, self.print_exceptions(method))
                setattr(self, 'help_%s' % m_name, lambda: print(method.__doc__))

            info('Methods:', ', '.join(methods))

            self.prompt = '%sh4ck%s.%s%s%s> ' % (CYELLOW, CEND, CLYELLOW, module, CEND)


    def complete_use(self, text, *_):
        return (
            [mod for mod in self._modules if mod.startswith(text)]
            if text
            else self._modules[:]
        )

    def preloop(self):
        if self._histfile.exists():
            readline.read_history_file(str(self._histfile))

    def postloop(self):
        readline.set_history_length(self._histfile_size)
        readline.write_history_file(str(self._histfile))
        print('Bye')

    def do_exit(self, _):
        return True

    def do_quit(self, _):
        return True

    def do_q(self, _):
        return True

    def do_EOF(self, _):
        return True


def main():
    from random import sample

    GREETINGS = [
        'Wh0a!',
        'Pwn3d',
        '1337',
        'Psst, do u want some exploits?',
        'P0w3r!',
        'I\'m in.',
        'All your base are belong to us!',
    ]

    intro = (
        '%s\n'
        '%s%s\n'
        '%s%s%s\n'
        '!!! Demo version !!!\n'
    ) % (
        BANNER,
        CYELLOW, sample(GREETINGS, 1)[0],
        CDGREY, '='*40, CEND
    )

    cmdline = CommandLine()

    try:
        cmdline.cmdloop(intro)
    except KeyboardInterrupt:
        cmdline.postloop()

if __name__ == "__main__":
    Fire(main)
